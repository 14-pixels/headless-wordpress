<?php
/**
 * Shared functionality.
 *
 * Functionality here is shared between the client
 * and proxy versions of this plugin. If _anything_
 * is changed in this file, it is incumbent on the
 * author to backport the changes so it exists in
 * both branches.
 *
 * @since 1.0.0
 * @package  WebDevStudios\SSO
 */

namespace WebDevStudios\SSO;

use \Firebase\JWT\JWT;

/**
 * Shared functionality between several areas.
 *
 * @author Justin Foell, Pavel Korotenko, Jay Wood
 * @since  1.0.0
 */
class Shared {

	/**
	 * OpenSSL cipher algorithm (default aes-265-ctr).
	 *
	 * @var string $cipher_algo
	 * @author Justin Foell
	 * @since  1.0.0
	 */
	private $cipher_algo = 'aes-256-ctr';

	/**
	 * JWT cipher algorithm (default HS256).
	 *
	 * @var string
	 * @author Justin Foell
	 * @since  1.2.0
	 */
	private $jwt_algo = 'HS256';

	/**
	 * Size of Initialization Vector in bytes.
	 *
	 * @var int $iv_num_bytes
	 * @author Justin Foell
	 * @since  1.0.0
	 */
	private $iv_num_bytes;

	/**
	 * Constructor.
	 *
	 * Initializes cipher values.
	 *
	 * @author Justin Foell
	 * @since  1.0.0
	 */
	public function __construct() {
		$this->iv_num_bytes = openssl_cipher_iv_length( $this->cipher_algo );
		add_filter( 'deprecated_function_trigger_error', array( $this, 'maybe_trigger_deprecated_error' ) );
	}

	/**
	 * Detect if we're currently showing the login page.
	 *
	 * @author Justin Foell
	 * @since  1.0.0
	 *
	 * @return boolean True if we're on the wp-login.php screen.
	 * @see https://wordpress.stackexchange.com/questions/12863/check-if-wp-login-is-current-page
	 */
	public function is_login() {
		return isset( $GLOBALS['pagenow'] ) ? 'wp-login.php' === $GLOBALS['pagenow'] : false;
	}

	/**
	 * Add Host
	 *
	 * @author Justin Foell
	 * @author Aubrey Portwood <aubrey@webdevstudios.com>
	 *
	 * @since  1.0.0
	 * @since  2.0.0
	 *
	 * @param array  $hosts Reference to hosts array.
	 * @param string $url   URL to parse.
	 *
	 * @return void Early bail if we are enforcing https.
	 */
	public function add_host( &$hosts, $url ) {
		if ( ! filter_var( $url, FILTER_SANITIZE_URL ) ) {
			return;
		}

		if ( ! $this->http_enabled() && 'http' === wp_parse_url( $url, PHP_URL_SCHEME ) ) {
			return;
		}

		$hosts[] = wp_parse_url( esc_url_raw( $url ), PHP_URL_HOST );
	}

	/**
	 * Create a hexadecimal nonce.
	 *
	 * Also used as the initialization vector of
	 * the encrypted state.
	 *
	 * @author Justin Foell
	 * @since  1.0.0
	 *
	 * @return string Hexadecimal nonce.
	 */
	public function generate_nonce() {
		return bin2hex( random_bytes( $this->iv_num_bytes ) );
	}

	/**
	 * Decode state from string to array.
	 *
	 * @author Justin Foell
	 * @since  1.0.0
	 *
	 * @param string $state Encoded json web token (JWT) from GET URL parameter 'state'.
	 *
	 * @return array $jwt {
	 *     State element expanded.
	 *     @type string  $nonce    Nonce for this request.
	 *     @type string  $redirect Originating site to redirect to.
	 *     @type string  $email    Email address of authorized user.
	 * }
	 * @throws Exception Any number of exceptions generated by the JWT library.
	 */
	public function decode_state( $state ) {
		$jwt_parts = explode( '.', $state );

		global $app;

		if ( is_string( $app ) ) {
			$app = app();
		}

		// JWT...
		if ( count( $jwt_parts ) === 3 ) {

			try {
				$jwt = JWT::decode(
					$state,
					app()->settings->get_wds_sso_key(),
					array( $this->jwt_algo )
				);
			} catch ( \Firebase\JWT\SignatureInvalidException $e ) {

				// translators: ...
				wp_die( wp_kses_post( sprintf( __( '<code>%s</code><br><br>Are you sure the <strong>Secure Key</strong> is set and is the same on both sites?', 'wds-sso' ), $e->getMessage() ) ), esc_html( $e->getMessage() ) );
			}

			$state = (array) $jwt;
			$this->legacy_remove_site( wp_parse_url( $state['redirect'], PHP_URL_HOST ) );

		// Legacy...
		} else {

			// Fall back on legacy decode.
			$state = $this->legacy_decode_state( $state );
			$this->legacy_add_site( wp_parse_url( $state['redirect'], PHP_URL_HOST ) );
		}

		// Do some rudimentary sanitization.
		$state['email'] = filter_var( $state['email'], FILTER_SANITIZE_EMAIL );

		return $state;
	}

	/**
	 * Encode state for use in a URL.
	 *
	 * @author Justin Foell
	 * @since  1.0.0
	 *
	 * @param array $state OAuth state.
	 *
	 * @return string Base64 encoded state.
	 */
	public function encode_state( $state ) {

		$host = wp_parse_url( $state['redirect'], PHP_URL_HOST );

		// Allow for 5 minutes of clock skew.
		JWT::$leeway = 180;

		if ( in_array( $host, $this->legacy_get_sites(), true ) ) {
			return $this->legacy_encode_state( $state );
		}

		$now   = current_time( 'timestamp', true );
		$token = array(
			// Standard Stuff.
			'iss'      => get_site_url(),
			'aud'      => $host,
			'iat'      => $now,
			'nbf'      => $now,
			'exp'      => $now + HOUR_IN_SECONDS,
			// Our info.
			'email'    => $state['email'],
			'hd'       => $state['hd'],
			'nonce'    => $state['nonce'],
			'redirect' => $state['redirect'],
		);

		return JWT::encode( $token, app()->settings->get_wds_sso_key() );
	}

	/**
	 * Filter to possibly prevent deprecated function calls from displaying errors.
	 *
	 * @param boolean $should_trigger If a deprecated message should trigger an error (default true).
	 * @return boolean False if WP_DEBUG_DISPLAY is true - displaying errors will prevent redirects.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	public function maybe_trigger_deprecated_error( $should_trigger ) {
		if ( ! defined( 'WP_DEBUG_DISPLAY' ) || defined( 'WP_DEBUG_DISPLAY' ) && true === WP_DEBUG_DISPLAY ) {
			return false;
		}
		return $should_trigger;
	}

	/**
	 * Wrapper for deprecated functions so we can apply some extra logic.
	 *
	 * @since 1.3.0
	 * @param string $function Function used.
	 * @param string $version Version the message was added in.
	 *
	 * @author  Justin Foell
	 */
	public function deprecated_function( $function, $version ) {
		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			do_action( 'deprecated_function_run', $function, null, $version );
			$log_string = "The {$function} function is deprecated since version {$version}.";
			error_log( $log_string ); // phpcs:ignore -- Debug only.
		} else {
			_deprecated_function( $function, $version ); // phpcs:ignore -- This line confuses phpcs.
		}
	}

	/**
	 * In-house state decoder (deprecated).
	 *
	 * @deprecated 1.3.0
	 * @param string $state State string to be decoded.
	 * @return array Decoded state array.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	private function legacy_decode_state( $state ) {
		$this->deprecated_function( 'legacy_decode_state()', '1.3.0' );

		$state = base64_decode( $state ); // @codingStandardsIgnoreLine Do some default checking & sanitization below.

		// Extract the initialization vector.
		$iv = substr( $state, 0, $this->iv_num_bytes );

		// Extract the encrypted string.
		$raw = substr( $state, $this->iv_num_bytes );

		// Hash the key.
		$keyhash = openssl_digest( app()->settings->get_wds_sso_key(), 'sha256', true );

		// And decrypt.
		$decrypted = openssl_decrypt( $raw, $this->cipher_algo, $keyhash, OPENSSL_RAW_DATA, $iv );

		// Put the iv/nonce back in the return array.
		$parts = array_merge( array( bin2hex( $iv ) ), explode( '|', $decrypted ) );

		// Fill in potentially missing pieces (defaults) with null.
		$extra = array_fill( 0, 4, null );

		/*
		 * Specifically use '+' here to combine these arrays.
		 *
		 * Function wp_parse_args() uses array_merge() internally, so that can't be used either.
		 *
		 * @see https://stackoverflow.com/questions/5394157/whats-the-difference-between-array-merge-and-array-array#5394203
		 */
		$parts = $parts + $extra;

		$keys = array(
			'nonce',
			'redirect',
			'hd',
			'email',
		);

		// Switch from numeric indexes to associative.
		$state = array_combine( $keys, $parts );

		return $state;
	}

	/**
	 * In-house state encoder (deprecated).
	 *
	 * @deprecated 1.3.0
	 * @param array $state State array to be encoded.
	 * @return string Encoded state string.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	private function legacy_encode_state( $state ) {
		$this->deprecated_function( 'legacy_encode_state()', '1.3.0' );

		// Remove the iv/nonce - it will get concatenated with the encrypted state.
		$iv = hex2bin( array_shift( $state ) );

		$state = implode( '|', $state );

		// Hash the key.
		$keyhash = openssl_digest( app()->settings->get_wds_sso_key(), 'sha256', true );

		// Encrypt.
		$encrypted = openssl_encrypt( $state, $this->cipher_algo, $keyhash, OPENSSL_RAW_DATA, $iv );

		// The result comprises the IV and encrypted data.
		return base64_encode( $iv . $encrypted ); // @codingStandardsIgnoreLine Checking and sanitization happens in decode_state().
	}

	/**
	 * List of sites using deprecated encode/decode.
	 *
	 * @return array Array of domains.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	private function legacy_get_sites() {
		return get_option( 'wds_sso_legacy_state', array() );
	}

	/**
	 * Add domain to list of sites using deprecated encode/decode.
	 *
	 * @param string $domain Site domain name.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	private function legacy_add_site( $domain ) {
		$sites = $this->legacy_get_sites();
		if ( ! in_array( $domain, $sites, true ) ) {
			$sites[] = $domain;
			update_option( 'wds_sso_legacy_state', $sites );
		}
	}

	/**
	 * Remove domain from list of sites using deprecated encode/decode.
	 *
	 * @param string $domain Site domain name.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  1.3.0
	 */
	private function legacy_remove_site( $domain ) {
		$sites = $this->legacy_get_sites();
		$index = array_search( $domain, $sites, true );
		if ( false !== $index ) {
			unset( $sites[ $index ] );
			update_option( 'wds_sso_legacy_state', $sites );
		}
	}

	/**
	 * Figure out if the user wants to use HTTP.
	 *
	 * @author Aubrey Portwood <aubrey@webdevstudios.com>
	 * @since  2.0.0
	 *
	 * @return bool True if so, false if not (filtered).
	 */
	public function http_enabled() {
		static $cached = null;

		if ( ! is_null( $cached ) ) {
			return $cached;
		}

		/**
		 * Filter whether or not HTTP is enabled.
		 *
		 * This filter is used to determine if the user wants to use HTTP.
		 * By default we discourage this use and also enforce HTTPS, but if you enable
		 * this we will let you do it!
		 *
		 * @since  2.0.0
		 * @author Aubrey Portwood <aubrey@webdevstudios.com>
		 *
		 * @param bool $enabled Set to true to enable, false to not.
		 */
		return $cached = (bool) apply_filters( 'wds_sso_http_enabled', defined( 'WDS_SSO_HTTP_ENABLED' ) && WDS_SSO_HTTP_ENABLED ? : false );
	}

	/**
	 * Get the scheme based on the http_enabled() setting.
	 *
	 * @return String http if http_enabled(), https otherwise.
	 * @author Justin Foell <justin.foell@webdevstudios.com>
	 * @since  2.0.0
	 */
	public function get_scheme() {
		return $this->http_enabled() ? 'http' : 'https';
	}
}
